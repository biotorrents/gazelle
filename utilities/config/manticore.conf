#!/usr/bin/php

##
# gazelle manticore config
#
# https://github.com/anniemaybytes/manticoresearch
# https://manual.manticoresearch.com/Introduction
#
# --
#
# crontab entries: root@manticore.torrents.bio
# these run on a dedicated manticore host
#
# rotate deltas every minute
# */1 * * * * sudo -u manticore indexer --rotate torrents_delta --quiet
# */1 * * * * sudo -u manticore indexer --rotate requests_delta --quiet
# */1 * * * * sudo -u manticore indexer --rotate collections_delta --quiet
#
# merge deltas every 15 minutes
# */15 * * * * sudo -u manticore indexer --merge torrents_main torrents_delta --rotate --quiet
# */15 * * * * sudo -u manticore indexer --merge requests_main requests_delta --rotate --quiet
# */15 * * * * sudo -u manticore indexer --merge collections_main collections_delta --rotate --quiet
#
# rotate all every hour
# 30 * * * * sudo -u manticore indexer --rotate --all --quiet
#

common {
	plugin_dir = /usr/local/lib/manticore
}

searchd {
	listen =
	log = /var/log/manticore/searchd.log
	pid_file = /var/run/manticore/searchd.pid
	binlog_path = /var/lib/manticore
}

indexer {
	mem_limit = 1024M # half the hetzner memory
}


##
# database_connection
#

source database_connection {
	type = mysql

	sql_host =
	sql_port =

	sql_db =
	sql_user =
	sql_pass =

	sql_query_pre = set character_set_results=utf8mb4
	sql_query_pre = set names utf8mb4
	sql_query_pre = set session query_cache_type=off
}


# --


##
# torrents: php variables
#

<?php

##
# parameter notes
#
# - started from the animebytes ruleset
# - charset_table: removed (default non_cjk)
# - morphology: icu_chinese => lemmatize_en_all
#   the english lemmatizer requires /usr/share/manticore/en.pak
# - blend_chars: removed [ U+60, U+3099..U+309F, U+30FB..U+30FF ]
# - bigram_index: added both_freq
# - bigram_freq_words: added [ the, a, you, i ]
#
# @see https://manual.manticoresearch.com/Creating_an_index/NLP_and_tokenization/Low-level_tokenization
#

$indexParams = "
	min_word_len = 1
	min_stemming_len = 3
	min_infix_len = 2
	html_strip = 1
	expand_keywords = 1
	index_exact_words = 1
	morphology = lemmatize_en_all
	blend_chars = !, ., U+23, ?, U+5B, U+5C, U+5D, U+2C, U+3B, U+7C, U+7E, \", $, %, ', (, ), *, +, /, :, <, =, >, ^, @
	blend_mode = trim_none, trim_head, trim_tail, trim_both, trim_all
	bigram_index = both_freq
	bigram_freq_words = the, a, you, i
";

$torrentAttributes = "
	sql_attr_bigint = size
	sql_attr_string = archive
	sql_attr_string = format
	sql_attr_string = license
	sql_attr_string = platform
	sql_attr_string = scope
	sql_attr_uint = alignment
	sql_attr_uint = categoryId
	sql_attr_uint = leechStatus
	sql_attr_uint = year
";

$torrentQuery = static function(string $where) {
	return "select \
		torrents_group.id as id, \
		torrents_group.category_id as categoryId, \
		torrents_group.title as title, \
		torrents_group.subject as subject, \
		torrents_group.object as object, \
		torrents_group.year as year, \
		torrents_group.workgroup as workgroup, \
		torrents_group.location as location, \
		torrents_group.identifier as identifier, \
		concat(torrents_group.tag_list, ' alwaysMatches') as tagList, \
		torrents_group.description as groupDescription, \
		torrents_group.picture as picture, \
		torrents.id as torrentId, \
		torrents.media as platform, \
		torrents.container as format, \
		torrents.codec as license, \
		torrents.resolution as scope, \
		torrents.version as version, \
		torrents.censored as alignment, \
		hex(torrents.info_hash) as infoHash, \
		torrents.fileCount as fileCount, \
		torrents.fileList as fileList, \
		torrents.size as size, \
		torrents.leechers as leechers, \
		torrents.seeders as seeders, \
		torrents.freeTorrent as leechStatus, \
		unix_timestamp(torrents.time) as timeAdded, \
		torrents.description as torrentDescription, \
		torrents.snatched as snatches, \
		torrents.archive as archive, \
		group_concat(artists_group.name separator ' ') as creatorList \
	from torrents_group \
		left join torrents on torrents.groupId = torrents_group.id \
		left join torrents_artists on torrents_artists.groupId = torrents_group.id \
		left join artists_group on artists_group.artistId = torrents_artists.artistId \
	where {$where} \
	group by torrents_group.id";
}

?>


##
# torrents_main
#

source torrents_main : database_connection {
	sql_query = <?= $torrentQuery(" 1 = 1 ") ?>

	<?= $torrentAttributes ?>
}

index torrents_main {
	source = torrents_main
	path = /var/lib/manticore/data/torrents_main

	<?= $indexParams ?>
}


##
# torrents_delta
#

source torrents_delta : torrents_main {
	sql_query = <?= $torrentQuery(" unix_timestamp(torrents_group.timestamp) > (unix_timestamp() - (86400)) ") ?>

	<?= $torrentAttributes ?>
}

index torrents_delta : torrents_main {
	source = torrents_delta
	path = /var/lib/manticore/data/torrents_delta
}


# --


##
# requests: php variables
#

<?php

# todo
$requestAttributes = "";

/*
$requestAttributes = "
	sql_attr_bigint = size
	sql_attr_string = archive
	sql_attr_string = format
	sql_attr_string = license
	sql_attr_string = platform
	sql_attr_string = scope
	sql_attr_uint = alignment
	sql_attr_uint = categoryId
	sql_attr_uint = leechStatus
	sql_attr_uint = year
";
*/

$requestQuery = static function(string $where) {
	return "select \
		requests.id as id, \
		requests.userId as userId, \
		unix_timestamp(requests.timeAdded) as timeAdded, \
		unix_timestamp(requests.lastVote) as lastVote, \
		requests.categoryId as categoryId, \
		requests.title as title, \
		requests.title2 as subject, \
		requests.titleJp as object, \
		requests.image as picture, \
		requests.description as description, \
		requests.catalogueNumber as identifier, \
		requests.fillerId as fillerId, \
		requests.torrentId as torrentId, \
		unix_timestamp(requests.timeFilled) as timeFilled, \
		requests.visible as visible, \
		requests.groupId as groupId, \
		count(requests_votes.requestId) as voteCount, \
		sum(requests_votes.bounty) as bounty, \
		group_concat(artists_group.name separator ' ') as creatorList, \
		concat(group_concat(tags.name separator ' '), ' matchEverywhere') as tagList \
	from requests \
		left join requests_votes on requests_votes.requestId = requests.id \
		left join requests_artists on requests_artists.requestId = requests.id \
		left join artists_group on artists_group.artistId = requests_artists.artistId \
		left join requests_tags on requests_tags.requestId = requests.id \
		left join tags on tags.id = requests_tags.tagId \
	where {$where} \
	group by requests.id";
}

?>


##
# requests_main
#

source requests_main : database_connection {
	sql_query = <?= $requestQuery(" 1 = 1 ") ?>

	<?= $requestAttributes ?>
}

index requests_main {
	source = requests_main
	path = /var/lib/manticore/data/requests_main

	<?= $indexParams ?>
}


##
# requests_delta
#

source requests_delta : requests_main {
	sql_query = <?= $requestQuery(" unix_timestamp(requests.lastVote) > (unix_timestamp() - (86400)) ") ?>

	<?= $requestAttributes ?>
}

index requests_delta : requests_main {
	source = requests_delta
	path = /var/lib/manticore/data/requests_delta
}


#--


##
# collections: php variables
#

<?php

# todo
$collectionAttributes = "";

/*
$collectionAttributes = "
	sql_attr_bigint = size
	sql_attr_string = archive
	sql_attr_string = format
	sql_attr_string = license
	sql_attr_string = platform
	sql_attr_string = scope
	sql_attr_uint = alignment
	sql_attr_uint = categoryId
	sql_attr_uint = leechStatus
	sql_attr_uint = year
";
*/

$collectionQuery = static function(string $where) {
	return "select \
		collages.id as id, \
		collages.name as collageTitle, \
		collages.description as collageDescription, \
		collages.numTorrents as torrentCount, \
		collages.deleted as deleted, \
		collages.locked as locked, \
		collages.categoryId as collageCategoryId, \
		concat(collages.tagList, ' alwaysMatches') as collageTagList, \
		collages.featured as featured, \
		collages.subscribers as subscriberCount, \
		unix_timestamp(collages.updated) as lastUpdate, \
		collages_torrents.groupId as groupId, \
		unix_timestamp(collages_torrents.addedOn) as timeAdded, \
		torrents_group.category_id as groupCategoryId, \
		torrents_group.title as groupTitle, \
		torrents_group.subject as subject, \
		torrents_group.object as object, \
		torrents_group.year as year, \
		torrents_group.workgroup as workgroup, \
		torrents_group.location as location, \
		torrents_group.identifier as identifier, \
		concat(torrents_group.tag_list, ' alwaysMatches') as groupTagList, \
		torrents_group.description as groupDescription, \
		torrents_group.picture as picture, \
		group_concat(artists_group.name separator ' ') as creatorList \
	from collages \
		left join collages_torrents on collages_torrents.collageId = collages.id \
		left join torrents_group on torrents_group.id = collages_torrents.groupId \
		left join collages_artists on collages_artists.collageId = collages.id \
		left join artists_group on artists_group.artistId = collages_artists.artistId \
	where {$where} \
	group by collages.id";
}

?>


##
# collections_main
#

source collections_main : database_connection {
	sql_query = <?= $collectionQuery(" 1 = 1 ") ?>

	<?= $collectionAttributes ?>
}

index collections_main {
	source = collections_main
	path = /var/lib/manticore/data/collections_main

	<?= $indexParams ?>
}


##
# collections_delta 
#

source collections_delta : collections_main {
	sql_query = <?= $collectionQuery(" unix_timestamp(collages.updated) > (unix_timestamp() - (86400)) ") ?>

	<?= $collectionAttributes ?>
}

index collections_delta : collections_main {
	source = collections_delta
	path = /var/lib/manticore/data/collections_delta
}